{"version":3,"sources":["Components/Calendar.js","Routes/Home.js","calcDate.js","Routes/Add.js","Routes/Schedule.js","Components/Router.js","Components/App.js","index.js"],"names":["Calendar","year","month","nowYear","nowMonth","nowDate","planObj","JSON","parse","localStorage","getItem","dateList","i","push","date","CalendarBox","monthData","week","cnt","weeks","count","firstDay","Date","getDay","lastDate","getDate","j","makeList","CalendarContainer","Weeks","WeekItem","map","CalendarRow","item","index","CalendarItem","CalendarItemDate","style","toString","includes","color","TodayBox","backgroundColor","replace","CalendarItemBody","indexOf","element","filter","el","sort","a","b","minute","hour","id","to","Schedule","ScheduleHour","length","ScheduleDiv","ScheduleMin","SchedulePlan","plan","CalendarItemBlank","drawCalender","styled","div","span","Month_ENG","HeaderColumn","Title","Today","Arrow","Home","getFullYear","getMonth","useState","setMonth","setYear","onClick","tempMonth","tempYear","Add","props","pathname","location","substring","split","plans","setSchedule","Container","Body","BodyPlan","className","placeholder","BodyTime","Confirm","ConfirmButton","document","querySelector","value","Number","max","window","setItem","stringify","alert","history","goBack","BackButton","input","button","match","params","planIdList","target","defaultValue","newPlans","path","exact","component","App","Router","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.68fa00d6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nfunction Calendar({ year, month, nowYear, nowMonth, nowDate }) {\n  const planObj = JSON.parse(localStorage.getItem(\"plans\"));\n  let dateList = [];\n  let sample = [];\n\n  for (let i in planObj) {\n    dateList.push(planObj[i].date[0] + planObj[i].date[1] + planObj[i].date[2]);\n  }\n\n  const makeList = (year, month) => {\n    let week = [];\n    let cnt = 1;\n    let weeks = [];\n    let count = 1;\n\n    const firstDay = new Date(year, month - 1, 1).getDay();\n    const lastDate = new Date(year, month, 0).getDate();\n\n    for (let i = firstDay; i > 0; i--) {\n      week.push(new Date(year, month - 1, 0).getDate() - i + 1 + \"a\");\n    }\n    for (let i = firstDay; i < 7; i++) {\n      week.push(cnt);\n      cnt++;\n    }\n    weeks.push(week);\n    week = [];\n\n    for (let j = 0; j < 5; j++) {\n      for (let i = 0; i < 7; i++) {\n        if (cnt > lastDate) {\n          week.push(count + \"a\");\n          count++;\n          continue;\n        }\n        week.push(cnt);\n        cnt++;\n      }\n      if (count > 7) break;\n      weeks.push(week);\n      week = [];\n    }\n\n    return weeks;\n  };\n\n  const drawCalender = (year, month, nowYear, nowMonth, nowDate) => {\n    const monthData = makeList(year, month);\n\n    return (\n      <CalendarContainer>\n        <Weeks>\n          <WeekItem>Sun</WeekItem>\n          <WeekItem>Mon</WeekItem>\n          <WeekItem>Tue</WeekItem>\n          <WeekItem>Wed</WeekItem>\n          <WeekItem>Thu</WeekItem>\n          <WeekItem>Fri</WeekItem>\n          <WeekItem>Sat</WeekItem>\n        </Weeks>\n        {monthData.map((week) => {\n          return (\n            <CalendarRow>\n              {week.map((item, index) => {\n                return (\n                  <CalendarItem>\n                    <CalendarItemDate\n                      style={\n                        item.toString().includes(\"a\")\n                          ? { color: \"lightgray\" }\n                          : item == nowDate\n                          ? {}\n                          : index == 0\n                          ? { color: \"red\" }\n                          : index == 6\n                          ? { color: \"blue\" }\n                          : { color: \"black\" }\n                      }\n                    >\n                      <TodayBox\n                        style={\n                          item == nowDate &&\n                          year == nowYear &&\n                          month == nowMonth\n                            ? { backgroundColor: \"#4b86d8\", color: \"white\" }\n                            : {}\n                        }\n                      >\n                        {item.toString().includes(\"a\")\n                          ? item.replace(\"a\", \"\")\n                          : item}\n                      </TodayBox>\n                    </CalendarItemDate>\n                    <CalendarItemBody>\n                      {dateList.indexOf(\n                        year.toString() + month.toString() + item.toString()\n                      ) != -1 ? (\n                        dateList\n                          .map((element, index) => {\n                            let tmp = [];\n                            return element ==\n                              year.toString() +\n                                month.toString() +\n                                item.toString()\n                              ? index\n                              : \"x\";\n                          })\n                          .filter((el) => el != \"x\")\n                          .sort((a, b) => planObj[a].minute - planObj[b].minute)\n                          .sort((a, b) => planObj[a].hour - planObj[b].hour)\n                          .map((el, id) => {\n                            return (\n                              <Link\n                                to={`/detail/${year}b${month}b${item}b${el}`}\n                              >\n                                <Schedule>\n                                  <ScheduleHour>\n                                    {planObj[el].hour.length < 2\n                                      ? \"0\" + planObj[el].hour\n                                      : planObj[el].hour}\n                                  </ScheduleHour>\n                                  <ScheduleDiv>:</ScheduleDiv>\n                                  <ScheduleMin>\n                                    {planObj[el].minute.length < 2\n                                      ? \"0\" + planObj[el].minute\n                                      : planObj[el].minute}\n                                  </ScheduleMin>\n                                  <SchedulePlan>\n                                    {planObj[el].plan}\n                                  </SchedulePlan>\n                                </Schedule>\n                              </Link>\n                            );\n                          })\n                      ) : (\n                        <Schedule></Schedule>\n                      )}\n                      <Link to={`/add/${year}b${month}b${item}`}>\n                        <CalendarItemBlank></CalendarItemBlank>\n                      </Link>\n                    </CalendarItemBody>\n                  </CalendarItem>\n                );\n              })}\n            </CalendarRow>\n          );\n        })}\n      </CalendarContainer>\n    );\n  };\n\n  return (\n    <CalendarBox>\n      {drawCalender(year, month, nowYear, nowMonth, nowDate)}\n    </CalendarBox>\n  );\n}\n\nexport default Calendar;\n\nconst Weeks = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst WeekItem = styled.div`\n  width: 100%;\n  text-align: center;\n  border-right: 1px solid lightgray;\n  color: grey;\n`;\n\nconst CalendarBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100vw;\n  height: 90vh;\n`;\n\nconst CalendarContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  border: 1px solid lightgray;\n  border-bottom: 0;\n`;\n\nconst CalendarRow = styled.div`\n  display: flex;\n  width: 100%;\n  height: 15%;\n`;\n\nconst CalendarItem = styled.div`\n  width: 100%;\n  border-bottom: 1px solid lightgray;\n  border-right: 1px solid lightgray;\n`;\n\nconst CalendarItemDate = styled.div`\n  text-align: center;\n  margin-top: 3px;\n  display: flex;\n  justify-content: center;\n`;\n\nconst CalendarItemBody = styled.div`\n  width: 100%;\n  height: 85%;\n`;\n\nconst CalendarItemBlank = styled.div`\n  width: 100%;\n  height: 80%;\n`;\n\nconst TodayBox = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  text-align: center;\n`;\n\nconst Schedule = styled.div`\n  background-color: green;\n  border-radius: 5px;\n  display: flex;\n  color: white;\n  margin: 5px 5px;\n  font-size: 13px;\n`;\n\nconst ScheduleHour = styled.span`\n  margin-left: 10px;\n`;\nconst ScheduleDiv = styled.span`\n  margin-left: 3px;\n  margin-right: 3px;\n`;\nconst ScheduleMin = styled.span`\n  margin-right: 5px;\n`;\nconst SchedulePlan = styled.span``;\n","import { render } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { getTodayYear, getTodayMonth, getTodayDate } from \"../calcDate\";\nimport Calender from \"../Components/Calendar\";\n\nconst Month_ENG = [\n  \"January\",\n  \"Feburary\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nfunction Home() {\n  let nowYear = getTodayYear();\n  let nowMonth = getTodayMonth();\n  let nowDate = getTodayDate();\n\n  const [month, setMonth] = useState(nowMonth);\n  const [year, setYear] = useState(nowYear);\n\n  const drawTodayMonth = () => {\n    setYear(nowYear);\n    setMonth(nowMonth);\n  };\n\n  const drawPrevMonth = () => {\n    let tempMonth = month;\n    let tempYear = year;\n    if (tempMonth == 1) {\n      tempYear--;\n      tempMonth = 12;\n    } else tempMonth--;\n    setYear(tempYear);\n    setMonth(tempMonth);\n  };\n\n  const drawNextMonth = () => {\n    let tempMonth = month;\n    let tempYear = year;\n    if (tempMonth == 12) {\n      tempYear++;\n      tempMonth = 1;\n    } else tempMonth++;\n    setYear(tempYear);\n    setMonth(tempMonth);\n  };\n\n  return (\n    <div>\n      <HeaderColumn>\n        <Today onClick={drawTodayMonth}>Today</Today>\n        <Arrow onClick={drawPrevMonth}>&lt;</Arrow>\n        <Arrow onClick={drawNextMonth}>&gt;</Arrow>\n        <Title>\n          {Month_ENG[month - 1]} {year}\n        </Title>\n      </HeaderColumn>\n      <Calender\n        year={year}\n        month={month}\n        nowYear={nowYear}\n        nowMonth={nowMonth}\n        nowDate={nowDate}\n      ></Calender>\n    </div>\n  );\n}\n\nconst HeaderColumn = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  margin-top: 40px;\n  margin-left: 130px;\n  margin-bottom: 40px;\n  align-items: center;\n`;\n\nconst Title = styled.span`\n  font-size: 30px;\n  color: grey;\n`;\n\nconst Today = styled.span`\n  font-size: 20px;\n  margin-right: 10px;\n  border: 1px solid lightgray;\n  padding: 10px;\n  border-radius: 10px;\n  :hover {\n    cursor: pointer;\n  }\n  color: grey;\n`;\n\nconst Arrow = styled.div`\n  font-size: 20px;\n  margin-right: 20px;\n  :hover {\n    cursor: pointer;\n  }\n  color: grey;\n`;\n\nexport default Home;\n","// 년, 월 input -> 1일이 무슨요일인지 & 마지막일이 몇일인지.input\n\nconst getTodayYear = () => {\n  return new Date().getFullYear();\n};\n\nconst getTodayMonth = () => {\n  return new Date().getMonth() + 1;\n};\n\nconst getTodayDate = () => {\n  return new Date().getDate();\n};\n\nconst getFirstDay = (year, month) => {\n  const firstDay = new Date(year, month - 1, 1).getDay();\n  return firstDay;\n};\n\nconst getLastDate = (year, month) => {\n  const lastDate = new Date(year, month, 0).getDate();\n  return lastDate;\n};\n\nexport { getTodayYear, getTodayMonth, getTodayDate, getFirstDay, getLastDate };\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nfunction Add(props) {\n  const {\n    location: { pathname },\n  } = props;\n  const Date = pathname.substring(5, pathname.length).split(\"b\");\n\n  let plans =\n    localStorage.getItem(\"plans\") == null\n      ? []\n      : JSON.parse(localStorage.getItem(\"plans\"));\n\n  const [schedule, setSchedule] = useState(plans);\n\n  const addPlan = () => {\n    const plan = document.querySelector(\".planBody\").value;\n    const hour = document.querySelector(\".planHour\").value;\n    const minute = document.querySelector(\".planMin\").value;\n    if (\n      Number(hour) <= 24 &&\n      Number(hour) >= 0 &&\n      Number(minute) <= 60 &&\n      Number(minute) >= 0\n    ) {\n      let max = -1;\n      for (let i in plans) {\n        if (plans[i].id > max) max = plans[i].id;\n      }\n      plans.push({\n        plan: plan,\n        date: Date,\n        hour: hour,\n        minute: minute,\n        id: max + 1,\n      });\n      setSchedule(plans);\n\n      window.localStorage.setItem(\"plans\", JSON.stringify(plans));\n      alert(\"Success Add Schedule\");\n      props.history.goBack();\n    } else {\n      alert(\"Invalid Time\");\n    }\n  };\n\n  return (\n    <Container>\n      <Title>새로운 일정</Title>\n      <Body>\n        <BodyPlan className=\"planBody\" placeholder=\"제목 추가\"></BodyPlan>\n        <BodyTime className=\"planHour\" placeholder=\"시간 추가\"></BodyTime>\n        <BodyTime className=\"planMin\" placeholder=\"시간 추가\"></BodyTime>\n      </Body>\n      <Confirm>\n        <ConfirmButton onClick={addPlan}>저장</ConfirmButton>\n        <BackButton onClick={props.history.goBack}>뒤로</BackButton>\n      </Confirm>\n    </Container>\n  );\n}\n\nexport default Add;\n\nconst Container = styled.div`\n  margin: 40px;\n  width: 50vw;\n  height: 80vh;\n  border: 1px solid lightgray;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background-color: #4b86d8;\n  width: 100%;\n  height: 20%;\n  color: white;\n  text-align: center;\n  font-size: 25px;\n`;\n\nconst Body = styled.div`\n  width: 100%;\n  height: 60%;\n  margin-top: 50px;\n  margin-left: 20px;\n`;\n\nconst BodyPlan = styled.input`\n  display: block;\n  width: calc(100% - 40px);\n  font-size: 25px;\n  border: none;\n  border-bottom: 2px solid lightgray;\n  margin-top: 50px;\n  margin: 20px 0px;\n  :focus {\n    outline-offset: 0px;\n    outline: none;\n  }\n`;\nconst BodyTime = styled.input`\n  width: calc(50% - 30px);\n  font-size: 25px;\n  border: none;\n  border-bottom: 2px solid lightgray;\n  margin: 20px 0px;\n  margin-top: 50px;\n  margin-right: 20px;\n  :focus {\n    outline-offset: 0px;\n    outline: none;\n  }\n`;\n\nconst Confirm = styled.div`\n  margin: 20px 20px;\n`;\n\nconst ConfirmButton = styled.button`\n  border: none;\n  width: 40%;\n  background-color: #58c6b3;\n  color: white;\n  font-size: 20px;\n  padding: 10px;\n  border-radius: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst BackButton = styled.button`\n  margin-left: 10px;\n  width: 40%;\n  border: none;\n  background-color: #58c6b3;\n  color: white;\n  font-size: 20px;\n  padding: 10px;\n  border-radius: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nfunction Schedule(props) {\n  const {\n    match: {\n      params: { id },\n    },\n  } = props;\n  const Date = id.split(\"b\");\n\n  const planObj = JSON.parse(localStorage.getItem(\"plans\"));\n  let sample = [];\n\n  const planIdList = id.split(\"b\");\n  const planId = planIdList[planIdList.length - 1];\n  const target = planObj[planId];\n\n  let plans =\n    localStorage.getItem(\"plans\") == null\n      ? []\n      : JSON.parse(localStorage.getItem(\"plans\"));\n\n  const [schedule, setSchedule] = useState(plans);\n\n  const modifyPlan = () => {\n    const plan = document.querySelector(\".planBody\").value;\n    const hour = document.querySelector(\".planHour\").value;\n    const minute = document.querySelector(\".planMin\").value;\n    if (\n      Number(hour) <= 24 &&\n      Number(hour) >= 0 &&\n      Number(minute) <= 60 &&\n      Number(minute) >= 0\n    ) {\n      const newPlans = plans.filter((el) => el.id != target.id);\n      let max = -1;\n      for (let i in plans) {\n        if (plans[i].id > max) max = plans[i].id;\n      }\n      newPlans.push({\n        plan: plan,\n        date: Date,\n        hour: hour,\n        minute: minute,\n        id: max + 1,\n      });\n\n      setSchedule(newPlans);\n\n      window.localStorage.setItem(\"plans\", JSON.stringify(newPlans));\n      alert(\"Success Add Schedule\");\n      props.history.goBack();\n    } else {\n      alert(\"Invalid Time\");\n    }\n  };\n\n  const deletePlan = () => {\n    const newPlans = plans.filter((el) => el.id != target.id);\n\n    setSchedule(newPlans);\n\n    window.localStorage.setItem(\"plans\", JSON.stringify(newPlans));\n    alert(\"Success Delete Schedule\");\n    props.history.push(\"/\");\n  };\n\n  return (\n    <Container>\n      <Title>일정 변경 및 제거</Title>\n      <Body>\n        <BodyPlan defaultValue={target.plan} className=\"planBody\"></BodyPlan>\n        <BodyTime defaultValue={target.hour} className=\"planHour\"></BodyTime>\n        <BodyTime defaultValue={target.minute} className=\"planMin\"></BodyTime>\n      </Body>\n      <Confirm>\n        <ConfirmButton onClick={modifyPlan}>변경</ConfirmButton>\n        <ConfirmButton onClick={deletePlan}>제거</ConfirmButton>\n\n        <ConfirmButton onClick={props.history.goBack}>뒤로</ConfirmButton>\n      </Confirm>\n    </Container>\n  );\n}\n\nexport default Schedule;\n\nconst Container = styled.div`\n  margin: 40px;\n  width: 50vw;\n  height: 80vh;\n  border: 1px solid lightgray;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background-color: #4b86d8;\n  width: 100%;\n  height: 20%;\n  color: white;\n  text-align: center;\n  font-size: 25px;\n`;\n\nconst Body = styled.div`\n  width: 100%;\n  height: 60%;\n  margin-top: 50px;\n  margin-left: 20px;\n`;\n\nconst BodyPlan = styled.input`\n  display: block;\n  width: calc(100% - 40px);\n  font-size: 25px;\n  border: none;\n  border-bottom: 2px solid lightgray;\n  margin-top: 50px;\n  margin: 20px 0px;\n  :focus {\n    outline-offset: 0px;\n    outline: none;\n  }\n`;\nconst BodyTime = styled.input`\n  width: calc(50% - 30px);\n  font-size: 25px;\n  border: none;\n  border-bottom: 2px solid lightgray;\n  margin: 20px 0px;\n  margin-top: 50px;\n  margin-right: 20px;\n  :focus {\n    outline-offset: 0px;\n    outline: none;\n  }\n`;\n\nconst Confirm = styled.div`\n  margin: 20px 20px;\n`;\n\nconst ConfirmButton = styled.button`\n  margin-right: 10px;\n  border: none;\n  width: 30%;\n  background-color: #58c6b3;\n  color: white;\n  font-size: 20px;\n  padding: 10px;\n  border-radius: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst BackButton = styled.button`\n  margin-left: 10px;\n  width: 40%;\n  border: none;\n  background-color: #58c6b3;\n  color: white;\n  font-size: 20px;\n  padding: 10px;\n  border-radius: 5px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n","import React from \"react\";\nimport { Route, Switch, HashRouter as Router } from \"react-router-dom\";\nimport Home from \"../Routes/Home\";\nimport Add from \"../Routes/Add\";\nimport Schedule from \"../Routes/Schedule\";\n\nexport default () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Home}></Route>;\n        <Route path=\"/add/:id\" component={Add}></Route>;\n        <Route path=\"/detail/:id\" component={Schedule}></Route>;\n      </Switch>\n    </Router>\n  );\n};\n","import React, { Component } from \"react\";\nimport Router from \"./Router\";\n\nclass App extends React.Component {\n  render() {\n    return <Router></Router>;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}